<Project>

  <PropertyGroup Label="Pack">
    <!-- The Sdks\NuGet.Build.Tasks.Pack\build\NuGet.Build.Tasks.Pack.targets unconditionally sets 
        PackageId=AssemblyName if no PackageId is provided, and then defaults IsPackable=true if 
        a PackageId is set (?!), meaning that by default everything is packable in Sdk-style 
        projects. 

        The Directory.Build.targets are imported after the user's project properties have been 
        read, and therefore gives us a chance to inspect if an explicit PackageId was provided, 
        before the NuGet SDK target is imported and defaults it. At this point, we can give 
        IsPackable a more sensible default, making it false if no PackageId was provided at this 
        point. -->
    <IsPackable Condition="'$(PackageId)' == ''">false</IsPackable>
    <IsPackable Condition="'$(PackageId)' != ''">true</IsPackable>
  </PropertyGroup>

  <PropertyGroup Label="NuGet Pack">
    <HttpNuGetCache>$(LocalAppData)\NuGet\v3-cache</HttpNuGetCache>
    <!-- By default, we clear the HTTP cache if our project is packable. This does *not* clear the cached installed packages -->
    <ClearHttpNuGetCacheOnPack Condition="'$(ClearHttpNuGetCacheOnPack)' == ''">$(IsPackable)</ClearHttpNuGetCacheOnPack>
    <!-- The actual NuGet cache is only cleared for the *current* PackageId, so no need to turn off its clearing on build/pack -->
    <NuGetCache>$(UserProfile)\.nuget\packages</NuGetCache>
  </PropertyGroup>

  <ItemGroup>
    <None Update="@(None)" CopyToOutputDirectory="PreserveNewest" />
  </ItemGroup>

  <Target Name="Prepare" BeforeTargets="PrepareForBuild">
    <ItemGroup>
      <!-- Do this in a target to avoid interfering with the project system when adding items -->
      <EmbeddedResource Include="@(None -&gt; WithMetadataValue('Extension', '.sbntxt'))" />
      <_PackageFiles Include="$(MSBuildThisFileDirectory)_._" PackagePath="lib/netstandard2.0/_._" />
      <_PackageFiles Include="*.props" PackagePath="build/$(TargetFramework)" />
      <_PackageFiles Include="*.targets" PackagePath="build/$(TargetFramework)" />
    </ItemGroup>

    <MakeDir Directories="$(PackageOutputPath)" Condition="'$(PackageOutputPath)' != '' And !Exists('$(PackageOutputPath)')" />
  </Target>

  <Target Name="UpdatePackageMetadata" Condition="$(CI) And $(IsPackable) And '$(PackageProjectUrl)' != '' And '$(SourceRevisionId)' != ''">
    <PropertyGroup>
      <Description>
        $(Description)

        Built from $(PackageProjectUrl)/tree/$(SourceRevisionId.Substring(0, 9))
      </Description>
    </PropertyGroup>
  </Target>
  
  <Target Name="ClearPackageOutput"
        Condition="!$(CI) And '$(PackageId)' != '' And '$(IsPackable)' == 'true'"
        BeforeTargets="Build">
    <ItemGroup>
      <_ExistingPackage Include="$(PackageOutputPath)\$(PackageId)*.nupkg" />
      <_PackageToDelete Include="@(_ExistingPackage)" Condition="$([System.Text.RegularExpressions.Regex]::IsMatch('%(Filename)', '$(PackageId)\.\d\.\d\.\d.*'))" />
    </ItemGroup>
    <Delete Files="@(_PackageToDelete)" ContinueOnError="true">
      <Output TaskParameter="DeletedFiles" ItemName="_DeletedPackages" />
    </Delete>
    <Message Text="Nuked existing packages: @(_DeletedPackages -> '%(Filename)%(Extension)')" Condition="'@(_DeletedPackages)' != ''" Importance="high" />
  </Target>

  <!-- Clears nuget cache for the current project package id -->
  <Target Name="ClearCachedPackageId"
          Condition="!$(CI) And '$(PackageId)' != '' And '$(IsPackable)' == 'true'"
          AfterTargets="Build;Pack" DependsOnTargets="Pack">
    <PropertyGroup>
      <PackageFolder>$(NuGetCache)\$(PackageId.ToLowerInvariant())</PackageFolder>
    </PropertyGroup>

    <Message Text="Nuking $(PackageFolder)" Condition="Exists($(PackageFolder))" Importance="high" />
    <Exec Command='rd "$(PackageFolder)" /q /s' Condition="Exists($(PackageFolder)) And '$(OS)' == 'Windows_NT'" />
    <Exec Command='rm -rf "$(PackageFolder)"' Condition="Exists($(PackageFolder)) And '$(OS)' != 'Windows_NT'" />
  </Target>

  <Target Name="ClearHttpNuGetCache"
          Condition="!$(CI) And $(ClearHttpNuGetCacheOnPack) And Exists('$(HttpNuGetCache)') And '$(PackageId)' != '' And '$(IsPackable)' == 'true'"
          AfterTargets="Build;Pack" DependsOnTargets="Pack">
    <Message Text="Nuking $(HttpNuGetCache)" Importance="high" />
    <Exec Command='rd "$(HttpNuGetCache)" /q /s' Condition="'$(OS)' == 'Windows_NT'" />
    <Exec Command='rm -rf "$(HttpNuGetCache)"' Condition="'$(OS)' != 'Windows_NT'" />
  </Target>

  <!-- For every PackageReference with Pack=true, we include the assemblies from it in the package -->
  <Target Name="AddPackDependencies" Inputs="@(RuntimeCopyLocalItems)" Outputs="%(RuntimeCopyLocalItems.NuGetPackageId)" AfterTargets="ResolvePackageAssets">
    <ItemGroup>
      <NuGetPackageId Include="@(RuntimeCopyLocalItems -> '%(NuGetPackageId)')" />
    </ItemGroup>
    <PropertyGroup>
      <NuGetPackageId>@(NuGetPackageId -&gt; Distinct())</NuGetPackageId>
    </PropertyGroup>
    <ItemGroup>
      <PackageReferenceDependency Include="@(PackageReference -&gt; WithMetadataValue('Identity', '$(NuGetPackageId)'))" />
    </ItemGroup>
    <PropertyGroup>
      <NuGetPackagePack>@(PackageReferenceDependency -> '%(Pack)')</NuGetPackagePack>
    </PropertyGroup>
    <ItemGroup Condition="'$(NuGetPackagePack)' == 'true'">
      <_PackageFiles Include="@(RuntimeCopyLocalItems)" PackagePath="$(BuildOutputTargetFolder)/$(TargetFramework)/%(Filename)%(Extension)" />
      <RuntimeCopyLocalItems Update="@(RuntimeCopyLocalItems)" CopyLocal="true" Private="true" />
      <ResolvedFileToPublish Include="@(RuntimeCopyLocalItems)" CopyToPublishDirectory="PreserveNewest" RelativePath="%(Filename)%(Extension)" />
    </ItemGroup>
  </Target>

</Project>
